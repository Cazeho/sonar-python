[
  {
    "constantDebtMinutes": 1,
    "description": "Used when the name is listed in the black list (unauthorized names).",
    "key": "C0102",
    "name": "Black listed name",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 1,
    "description": "Used when the name doesn't conform to naming rules associated to its type (constant, variable, class...).",
    "key": "C0103",
    "name": "Invalid name",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "key": "C0111",
    "name": "Missing docstring",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when a module, function, class or method has an empty docstring (it would be too easy ;).",
    "key": "C0112",
    "name": "Empty docstring",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 1,
    "description": "Used when a boolean expression contains an unneeded negation.",
    "key": "C0113",
    "name": "Useless negation",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 20,
    "description": "Used when an expression is compared to singleton values like True, False or None.",
    "key": "C0121",
    "name": "Singleton comparison",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 1,
    "description": "Used when the constant is placed on the left side of a comparison. It is usually clearer in intent to place it in the right hand side of the comparison.",
    "key": "C0122",
    "name": "Misplaced comparison constant",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 15,
    "description": "The idiomatic way to perform an explicit typecheck in Python is to use isinstance(x, Y) rather than type(x) == Y, type(x) is Y. Though there are unusual situations where these give different results.",
    "key": "C0123",
    "name": "Using type() instead of isinstance() for a typecheck.",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 20,
    "description": "Emitted when code that iterates with range and len is encountered. Such code can be simplified by using the enumerate builtin.",
    "key": "C0200",
    "name": "Consider using enumerate instead of iterating with range and len",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 20,
    "description": "Emitted when the keys of a dictionary are iterated through the .keys() method. It is enough to just iterate through the dictionary itself, as in \"for key in dictionary\".",
    "key": "C0201",
    "name": "Consider iterating the dictionary directly instead of calling .keys()",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 10,
    "description": "Used when a class method has a first argument named differently than the value specified in valid-classmethod-first-arg option (default to \"cls\"), recommended to easily differentiate them from regular instance methods.",
    "key": "C0202",
    "name": "Class method should have \"cls\" as first argument",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 10,
    "description": "Used when a metaclass method has a first argument named differently than the value specified in valid-classmethod-first-arg option (default to \"cls\"), recommended to easily differentiate them from regular instance methods.",
    "key": "C0203",
    "name": "Metaclass method should have \"mcs\" as first argument",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 20,
    "description": "Used when a metaclass class method has a first argument named differently than the value specified in valid-metaclass-classmethod-first-arg option (default to \"mcs\"), recommended to easily differentiate them from regular instance methods.",
    "key": "C0204",
    "name": "Metaclass class method first argument",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 15,
    "description": "Used when a class __slots__ is a simple string, rather than an iterable.",
    "key": "C0205",
    "name": "Class __slots__ should be a non-string iterable",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 1,
    "description": "Used when a line is longer than a given number of characters.",
    "key": "C0301",
    "name": "Line too long",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 30,
    "description": "Used when a module has too many lines, reducing its readability.",
    "key": "C0302",
    "name": "Too many lines in module",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 60,
    "description": "Used when there is whitespace between the end of a line and the newline.",
    "key": "C0303",
    "name": "Trailing whitespace",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 10,
    "description": "Used when the last line in a file is missing a newline.",
    "key": "C0304",
    "name": "Final newline missing",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 1,
    "description": "Used when there are trailing blank lines in a file.",
    "key": "C0305",
    "name": "Trailing newlines",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when more than on statement are found on the same line.",
    "key": "C0321",
    "name": "More than one statement on a single line",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 1,
    "key": "C0322",
    "name": "Operator not preceded by a space",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 1,
    "key": "C0323",
    "name": "Operator not followed by a space",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 1,
    "key": "C0324",
    "name": "Comma not followed by a space",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when a single item in parentheses follows an if, for, or other keyword.",
    "key": "C0325",
    "name": "Unnecessary parentheses",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 1,
    "description": "Used when a wrong number of spaces is used around an operator, bracket or block opener.",
    "key": "C0326",
    "name": "Wrong number of spaces around an operator, bracket, or comma, or before a block opener",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 15,
    "description": "Used when there are mixed (LF and CRLF) newline signs in a file.",
    "key": "C0327",
    "name": "Mixed line endings LF and CRLF",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 1,
    "description": "Used when there is different newline than expected.",
    "key": "C0328",
    "name": "Unexpected line ending format",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "TODO",
    "key": "C0330",
    "name": "Bad continuation",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 1,
    "description": "Used when a word in comment is not spelled correctly.",
    "key": "C0401",
    "name": "Wrong spelling of a word in a comment",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 1,
    "description": "Used when a word in docstring is not spelled correctly.",
    "key": "C0402",
    "name": "Wrong spelling of a word in a docstring",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 1,
    "description": "Used when a word in docstring cannot be checked by enchant.",
    "key": "C0403",
    "name": "Invalid characters in a docstring",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when import statement importing multiple modules is detected.",
    "key": "C0410",
    "name": "Multiple imports on one line",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when PEP8 import order is not respected (standard imports first, then third-party libraries, then local imports)",
    "key": "C0411",
    "name": "Wrong import order",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when imports are not grouped by packages",
    "key": "C0412",
    "name": "Ungrouped imports",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when code and imports are mixed",
    "key": "C0413",
    "name": "Wrong import position",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 20,
    "key": "C1001",
    "name": "Old-style class defined.",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when an import alias is same as original package.e.g using import numpy as numpy instead of import numpy as np",
    "key": "C0414",
    "name": "Import alias does not rename original package",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 20,
    "description": "Used when Pylint detects that len(sequence) is being used without explicit comparison inside a condition to determine if a sequence is empty. Instead of coercing the length to a boolean, either rely on the fact that empty sequences are false or compare the length against a scalar.",
    "key": "C1801",
    "name": "Do not use `len(SEQUENCE)` to determine if a sequence is empty",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when a syntax error is raised for a module.",
    "key": "E0001",
    "name": "Syntax error",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when an unknown inline option is encountered.",
    "key": "E0011",
    "name": "Unrecognized file option",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when a bad value for an inline option is encountered.",
    "key": "E0012",
    "name": "Bad option value",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 30,
    "description": "Used when the special class method __init__ is turned into a generator by a yield in its body.",
    "key": "E0100",
    "name": "__init__ method is a generator",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when the special class method __init__ has an explicit return value.",
    "key": "E0101",
    "name": "Explicit return in __init__",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 15,
    "description": "Used when a function / class / method is redefined.",
    "key": "E0102",
    "name": "Redefined function/class/method",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 15,
    "description": "Used when break or continue keywords are used outside a loop.",
    "key": "E0103",
    "name": "Usage of 'break' or 'continue' outside of a loop",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when a \"return\" statement is found outside a function or method.",
    "key": "E0104",
    "name": "Return outside function",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 10,
    "description": "Used when a \"yield\" statement is found outside a function or method.",
    "key": "E0105",
    "name": "Yield outside function",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 15,
    "key": "E0106",
    "name": "Return with argument inside generator",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 3,
    "description": "Used when you attempt to use the C-style pre-increment or pre-decrement operator -- and ++, which doesn't exist in Python.",
    "key": "E0107",
    "name": "Use of a non-existent operator",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Duplicate argument names in function definitions are syntax errors.",
    "key": "E0108",
    "name": "Duplicate argument name in function definition",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 10,
    "key": "E0109",
    "name": "Missing argument to reversed()",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when an abstract class with `abc.ABCMeta` as metaclass has abstract methods and is instantiated.",
    "key": "E0110",
    "name": "Abstract class instantiated",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 10,
    "description": "Used when the first argument to reversed() builtin isn't a sequence (does not implement __reversed__, nor __getitem__ and __len__",
    "key": "E0111",
    "name": "The first reversed() argument is not a sequence",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Emitted when there are more than one starred expressions (`*x`) in an assignment. This is a SyntaxError.",
    "key": "E0112",
    "name": "More than one starred expression in assignment",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Emitted when a star expression is used as a starred assignment target.",
    "key": "E0113",
    "name": "Starred assignment target must be in a list or tuple",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Emitted when a star expression is not used in an assignment target.",
    "key": "E0114",
    "name": "Can use starred expression only in assignment target",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 15,
    "description": "Emitted when a name is both nonlocal and global.",
    "key": "E0115",
    "name": "Name is nonlocal and global",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 15,
    "key": "E0116",
    "name": "'continue' not supported inside 'finally' clause",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Emitted when a nonlocal variable does not have an attached name somewhere in the parent scopes",
    "key": "E0117",
    "name": "Nonlocal name found without binding",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Emitted when format function is not called on str object. e.g doing print(\"value: {}\").format(123) instead of print(\"value: {}\".format(123)). This might not be what the user intended to do.",
    "key": "E0119",
    "name": "Format function is not called on str",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 15,
    "description": "Used when a class defines a method which is hidden by an instance attribute from an ancestor class or set by some client code.",
    "key": "E0202",
    "name": "Method hidden by attribute of super class",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 15,
    "description": "Used when an instance member is accessed before it's actually assigned.",
    "key": "E0203",
    "name": "Access to member before its definition",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 10,
    "description": "Used when a method which should have the bound instance as first argument has no argument defined.",
    "key": "E0211",
    "name": "Method has no argument",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when a method has an attribute different the \"self\" as first argument. This is considered as an error since this is a so common convention that you shouldn't break it!",
    "key": "E0213",
    "name": "Method should have \"self\" as first argument",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 20,
    "key": "E0221",
    "name": "Implemented interface must be a class",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 30,
    "key": "E0222",
    "name": "Missing method from interface",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 10,
    "key": "E0235",
    "name": "__exit__ must accept 3 arguments: type, value, traceback",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 10,
    "description": "Used when an invalid (non-string) object occurs in __slots__.",
    "key": "E0236",
    "name": "Invalid object in __slots__, must contain only non empty strings",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 10,
    "description": "Used when assigning to an attribute not defined in the class slots.",
    "key": "E0237",
    "name": "Assigning to attribute not defined in class slots",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 20,
    "description": "Used when an invalid __slots__ is found in class. Only a string, an iterable or a sequence is permitted.",
    "key": "E0238",
    "name": "Invalid __slots__ object",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 20,
    "description": "Used when a class inherits from something which is not a class.",
    "key": "E0239",
    "name": "Inheriting from non-class",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 20,
    "description": "Used when a class has an inconsistent method resolution order.",
    "key": "E0240",
    "name": "Inconsistent method resolution order",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 20,
    "description": "Used when a class has duplicate bases.",
    "key": "E0241",
    "name": "Duplicate bases",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 10,
    "description": "Used when an __iter__ method returns something which is not an iterable (i.e. has no `__next__` method)",
    "key": "E0301",
    "name": "__iter__ returns non-iterator",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 20,
    "description": "Emitted when a special method was defined with an invalid number of parameters. If it has too few or too many, it might not work at all.",
    "key": "E0302",
    "name": "Unexpected special method signature",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 20,
    "description": "Used when a __len__ method returns something which is not a non-negative integer",
    "key": "E0303",
    "name": "__len__ does not return non-negative integer",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 10,
    "description": "Used when pylint has been unable to import a module.",
    "key": "E0401",
    "name": "Import error",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 20,
    "description": "Used when a relative import tries to access too many levels in the current package.",
    "key": "E0402",
    "name": "Attempted relative import beyond top-level package",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "key": "E0501",
    "name": "Non-ASCII characters found but no encoding specified (PEP 263)",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 5,
    "key": "E0502",
    "name": "Wrong encoding specified",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 10,
    "key": "E0503",
    "name": "Unknown encoding specified",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 15,
    "description": "Used when a local variable is accessed before its assignment.",
    "key": "E0601",
    "name": "Using variable before assignment",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 20,
    "description": "Used when an undefined variable is accessed.",
    "key": "E0602",
    "name": "Undefined variable",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 20,
    "description": "Used when an undefined variable name is referenced in __all__.",
    "key": "E0603",
    "name": "Undefined variable name in __all__",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 3,
    "description": "Used when an invalid (non-string) object occurs in __all__.",
    "key": "E0604",
    "name": "Invalid object in __all__, must contain only strings",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 10,
    "description": "Used when a name cannot be found in a module.",
    "key": "E0611",
    "name": "Undefined name in module",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 20,
    "key": "E0632",
    "name": "Unbalanced tuple unpacking",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 20,
    "description": "Used when something which is not a sequence is used in an unpack assignment",
    "key": "E0633",
    "name": "Attempting to unpack a non-sequence",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 30,
    "description": "Used when except clauses are not in the correct order (from the more specific to the more generic). If you don't fix the order, some exceptions may not be caught by the most specific handler.",
    "key": "E0701",
    "name": "Bad except clauses order",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 20,
    "description": "Used when something which is neither a class, an instance or a string is raised (i.e. a `TypeError` will be raised).",
    "key": "E0702",
    "name": "Raising only allowed for classes, instances or strings",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when using the syntax \"raise ... from ...\", where the exception context is not an exception, nor None.",
    "key": "E0703",
    "name": "Exception context set to something which is not an exception, nor None",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 10,
    "description": "Used when a bare raise is not used inside an except clause. This generates an error, since there are no active exceptions to be reraised. An exception to this rule is represented by a bare raise inside a finally clause, which might work, as long as an exception is raised inside the try block, but it is nevertheless a code smell that must not be relied upon.",
    "key": "E0704",
    "name": "The raise statement is not inside an except clause",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 15,
    "description": "Used when a new style class which doesn't inherit from BaseException is raised.",
    "key": "E0710",
    "name": "Raising a new style class which doesn't inherit from BaseException",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when NotImplemented is raised instead of NotImplementedError",
    "key": "E0711",
    "name": "NotImplemented raised - should raise NotImplementedError",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 20,
    "description": "Used when a class which doesn't inherit from Exception is used as an exception in an except clause.",
    "key": "E0712",
    "name": "Catching an exception which doesn't inherit from Exception",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 10,
    "key": "E1001",
    "name": "Use of __slots__ on an old style class",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 10,
    "key": "E1002",
    "name": "Use of super on an old style class",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 10,
    "description": "Used when another argument than the current class is given as first argument of the super builtin.",
    "key": "E1003",
    "name": "Bad first argument given to super",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 10,
    "key": "E1004",
    "name": "Missing argument to super()",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 10,
    "description": "Used when a variable is accessed for an unexistent member.",
    "key": "E1101",
    "name": "Access of nonexistent member",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 3,
    "description": "Used when an object being called has been inferred to a non callable object.",
    "key": "E1102",
    "name": "Calling of not callable",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 10,
    "key": "E1103",
    "name": "Accessing nonexistent member (type information incomplete)",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 20,
    "description": "Used when an assignment is done on a function call but the inferred function doesn't return anything.",
    "key": "E1111",
    "name": "Assigning result of a function call, where the function has no return",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when a function call passes too few arguments.",
    "key": "E1120",
    "name": "Too few arguments",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when a function call passes too many positional arguments.",
    "key": "E1121",
    "name": "Too many positional arguments for function call",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 3,
    "key": "E1122",
    "name": "Duplicate keyword argument in function call",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 3,
    "description": "Used when a function call passes a keyword argument that doesn't correspond to one of the function's parameter names.",
    "key": "E1123",
    "name": "Passing unexpected keyword argument in function call",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when a function call would result in assigning multiple values to a function parameter, one value from a positional argument and one from a keyword argument.",
    "key": "E1124",
    "name": "Multiple values passed for parameter in function call",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when a function call does not pass a mandatory keyword-only argument.",
    "key": "E1125",
    "name": "Missing mandatory keyword argument in call",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 15,
    "description": "Used when a sequence type is indexed with an invalid type. Valid types are ints, slices, and objects with an __index__ method.",
    "key": "E1126",
    "name": "Sequence index is not an int, slice, or instance with __index__",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 15,
    "description": "Used when a slice index is not an integer, None, or an object with an __index__ method.",
    "key": "E1127",
    "name": "Slice index is not an int, None, or instance with __index__",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 15,
    "description": "Used when an assignment is done on a function call but the inferred function returns nothing but None.",
    "key": "E1128",
    "name": "Assigning result of a function call, where the function returns None",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 15,
    "description": "Used when an instance in a with statement doesn't implement the context manager protocol(__enter__/__exit__).",
    "key": "E1129",
    "name": "Context manager doesn't implement __enter__ and __exit__",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 15,
    "description": "Emitted when a unary operand is used on an object which does not support this type of operation.",
    "key": "E1130",
    "name": "Invalid unary operand type",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 15,
    "description": "Emitted when a binary arithmetic operation between two operands is not supported.",
    "key": "E1131",
    "name": "Unsupported binary operation",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 15,
    "description": "Emitted when a function call got multiple values for a keyword.",
    "key": "E1132",
    "name": "Multiple values for keyword argument",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 15,
    "description": "Used when a non-iterable value is used in place where iterable is expected",
    "key": "E1133",
    "name": "Non-iterable value used in an iterating context",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 15,
    "description": "Used when a non-mapping value is used in place where mapping is expected",
    "key": "E1134",
    "name": "Non-mapping value used in a mapping context",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 15,
    "description": "Emitted when an instance in membership test expression doesn't implement membership protocol (__contains__/__iter__/__getitem__).",
    "key": "E1135",
    "name": "Unsupported membership test",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 15,
    "description": "Emitted when a subscripted value doesn't support subscription (i.e. doesn't define __getitem__ method or __class_getitem__ for a class).",
    "key": "E1136",
    "name": "Subscripted value doesn't support subscription",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 15,
    "description": "Emitted when an object does not support item assignment (i.e. doesn't define __setitem__ method).",
    "key": "E1137",
    "name": "Object does not support item assignment",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 15,
    "description": "Emitted when an object does not support item deletion (i.e. doesn't define __delitem__ method).",
    "key": "E1138",
    "name": "Object does not support item deletion",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 15,
    "description": "Emitted whenever we can detect that a class is using, as a metaclass, something which might be invalid for using as a metaclass.",
    "key": "E1139",
    "name": "Invalid metaclass used",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Emitted when a dict key is not hashable (i.e. doesn't define __hash__ method).",
    "key": "E1140",
    "name": "Dict key is unhashable",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 10,
    "description": "Used when an unsupported format character is used in a logging statement format string.",
    "key": "E1200",
    "name": "Unsupported logging format character",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 10,
    "description": "Used when a logging statement format string terminates before the end of a conversion specifier.",
    "key": "E1201",
    "name": "Logging format string ends in middle of conversion specifier",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 10,
    "description": "Used when a logging format string is given too many arguments.",
    "key": "E1205",
    "name": "Too many arguments for logging format string",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 10,
    "description": "Used when a logging format string is given too few arguments.",
    "key": "E1206",
    "name": "Not enough arguments for logging format string",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 3,
    "description": "Used when an unsupported format character is used in a format string.",
    "key": "E1300",
    "name": "Unsupported format character",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 3,
    "description": "Used when a format string terminates before the end of a conversion specifier.",
    "key": "E1301",
    "name": "Format string ends in middle of conversion specifier",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when a format string contains both named (e.g. '%(foo)d') and unnamed (e.g. '%d') conversion specifiers. This is also used when a named conversion specifier contains * for the minimum field width and/or precision.",
    "key": "E1302",
    "name": "Mixing named and unnamed conversion specifiers in format string",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 10,
    "description": "Used when a format string that uses named conversion specifiers is used with an argument that is not a mapping.",
    "key": "E1303",
    "name": "Expected mapping for format string",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 10,
    "description": "Used when a format string that uses named conversion specifiers is used with a dictionary that doesn't contain all the keys required by the format string.",
    "key": "E1304",
    "name": "Missing key in format string dictionary",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when a format string that uses unnamed conversion specifiers is given too many arguments.",
    "key": "E1305",
    "name": "Too many arguments for format string",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when a format string that uses unnamed conversion specifiers is given too few arguments",
    "key": "E1306",
    "name": "Not enough arguments for format string",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when a type required by format string is not suitable for actual argument type",
    "key": "E1307",
    "name": "Argument does not match format type",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 10,
    "description": "The argument to a str.{l,r,}strip call contains a duplicate character,",
    "key": "E1310",
    "name": "Suspicious argument in lstrip/rstrip",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Env manipulation functions support only string type arguments. See https://docs.python.org/3/library/os.html#os.getenv.",
    "key": "E1507",
    "name": "Env manipulation functions does not support type argument",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when a print statement is used (`print` is a function in Python 3)",
    "key": "E1601",
    "name": "print statement used",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 10,
    "description": "Used when parameter unpacking is specified for a function(Python 3 doesn't allow it)",
    "key": "E1602",
    "name": "Parameter unpacking specified",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 10,
    "description": "Python3 will not allow implicit unpacking of exceptions in except clauses. See http://www.python.org/dev/peps/pep-3110/",
    "key": "E1603",
    "name": "Implicit unpacking of exceptions is not supported in Python 3",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when the alternate raise syntax 'raise foo, bar' is used instead of 'raise foo(bar)'.",
    "key": "E1604",
    "name": "Use raise ErrorClass(args) instead of raise ErrorClass, args.",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when the deprecated \"``\" (backtick) operator is used instead of the str() function.",
    "key": "E1605",
    "name": "Use of the `` operator",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 10,
    "key": "E1606",
    "name": "Use of long suffix",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 5,
    "key": "E1607",
    "name": "Use of the <> operator",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 3,
    "key": "E1608",
    "name": "Use of old octal literal",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 10,
    "key": "E1609",
    "name": "Import * only allowed at module level",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 10,
    "key": "E1610",
    "name": "Non-ascii bytes literals not supported in 3.x",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 15,
    "description": "Used when an `yield` or `yield from` statement is found inside an async function. This message can't be emitted when using Python < 3.5.",
    "key": "E1700",
    "name": "Yield inside async function",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when an async context manager is used with an object that does not implement the async context management protocol. This message can't be emitted when using Python < 3.5.",
    "key": "E1701",
    "name": "Async context manager doesn't implement __aenter__ and __aexit__",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 15,
    "description": "Used when an error occurred preventing the analysis of a module (unable to find it for instance).",
    "key": "F0001",
    "name": "Analysis failed",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 15,
    "description": "Used when an unexpected error occurred while building the Astroid representation. This is usually accompanied by a traceback. Please report such errors !",
    "key": "F0002",
    "name": "Internal Pylint error",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 15,
    "key": "F0003",
    "name": "Ignored builtin module",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 15,
    "key": "F0004",
    "name": "Unexpected inferred value",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 15,
    "description": "Used when an exception occurred while building the Astroid representation which could be handled by astroid.",
    "key": "F0010",
    "name": "Error while code parsing",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 15,
    "description": "Used when Pylint has been unable to check methods signature compatibility for an unexpected reason. Please report this kind if you don't make sense of it.",
    "key": "F0202",
    "name": "Unable to check methods signature",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 15,
    "key": "F0220",
    "name": "Failed to resolve interfaces",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 15,
    "key": "F0321",
    "name": "Format detection error",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 15,
    "key": "F0401",
    "name": "Unable to import module",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 15,
    "description": "Used to inform that a built-in module has not been checked using the raw checkers.",
    "key": "I0001",
    "name": "Unable to run raw checkers on built-in module",
    "priority": "INFO"
  },
  {
    "constantDebtMinutes": 15,
    "description": "Used when an inline option is either badly formatted or can't be used inside modules.",
    "key": "I0010",
    "name": "Unable to consider inline option",
    "priority": "INFO"
  },
  {
    "constantDebtMinutes": 15,
    "description": "Used when an inline option disables a message or a messages category.",
    "key": "I0011",
    "name": "Locally disabling message",
    "priority": "INFO"
  },
  {
    "constantDebtMinutes": 15,
    "key": "I0012",
    "name": "Locally enabling message",
    "priority": "INFO"
  },
  {
    "constantDebtMinutes": 15,
    "description": "Used to inform that the file will not be checked",
    "key": "I0013",
    "name": "Ignoring entire file",
    "priority": "INFO"
  },
  {
    "constantDebtMinutes": 15,
    "description": "A message was triggered on a line, but suppressed explicitly by a disable= comment in the file. This message is not generated for messages that are ignored due to configuration settings.",
    "key": "I0020",
    "name": "Suppressed message",
    "priority": "INFO"
  },
  {
    "constantDebtMinutes": 15,
    "description": "Reported when a message is explicitly disabled for a line or a block of code, but never triggered.",
    "key": "I0021",
    "name": "Useless suppression of message",
    "priority": "INFO"
  },
  {
    "constantDebtMinutes": 15,
    "description": "Some inline pylint options have been renamed or reworked, only the most recent form should be used. NOTE:skip-all is only available with pylint >= 0.26",
    "key": "I0022",
    "name": "Deprecated pragma",
    "priority": "INFO"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when a message is enabled or disabled by id.",
    "key": "I0023",
    "name": "Use symbolic message",
    "priority": "INFO"
  },
  {
    "constantDebtMinutes": 15,
    "description": "Used when a variable is accessed for non-existent member of C extension. Due to unavailability of source static analysis is impossible, but it may be performed by introspecting living objects in run-time.",
    "key": "I1101",
    "name": "Non-existent member of C extension",
    "priority": "INFO"
  },
  {
    "constantDebtMinutes": 20,
    "description": "Used when comparing an object to a literal, which is usually what you do not want to do, since you can compare to a different literal than what was expected altogether.",
    "key": "R0123",
    "name": "Comparison to literal",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 1,
    "description": "Used when something is compared against itself.",
    "key": "R0124",
    "name": "Redundant comparison",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 20,
    "description": "Used when a method doesn't use its bound instance, and so could be written as a function.",
    "key": "R0201",
    "name": "Method could be a function",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 15,
    "description": "Used when a class method is defined without using the decorator syntax.",
    "key": "R0202",
    "name": "Consider using a decorator instead of calling classmethod",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 15,
    "description": "Used when a static method is defined without using the decorator syntax.",
    "key": "R0203",
    "name": "Consider using a decorator instead of calling staticmethod",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 1,
    "description": "Used when a class inherit from object, which under python3 is implicit, hence can be safely removed from bases.",
    "key": "R0205",
    "name": "Class inherits from object, can be safely removed from bases in python3",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 120,
    "description": "Used when a cyclic import between two or more modules is detected.",
    "key": "R0401",
    "name": "Cyclic import",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 15,
    "description": "Indicates that a set of similar lines has been detected among multiple file. This usually means that the code should be refactored to avoid this duplication.",
    "key": "R0801",
    "name": "Similar lines",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 180,
    "description": "Used when class has too many parent classes, try to reduce this to get a simpler (and so easier to use) class.",
    "key": "R0901",
    "name": "Too many ancestors",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 120,
    "description": "Used when class has too many instance attributes, try to reduce this to get a simpler (and so easier to use) class.",
    "key": "R0902",
    "name": "Too many instance attributes",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 60,
    "description": "Used when class has too few public methods, so be sure it's really worth it.",
    "key": "R0903",
    "name": "Too few public methods",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 120,
    "description": "Used when class has too many public methods, try to reduce this to get a simpler (and so easier to use) class.",
    "key": "R0904",
    "name": "Too many public methods",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 20,
    "description": "Used when a function or method has too many return statement, making it hard to follow.",
    "key": "R0911",
    "name": "Too many return statements",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 15,
    "description": "Used when a function or method has too many branches, making it hard to follow.",
    "key": "R0912",
    "name": "Too many branches",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 30,
    "description": "Used when a function or method takes too many arguments.",
    "key": "R0913",
    "name": "Too many arguments",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 20,
    "description": "Used when a function or method has too many local variables.",
    "key": "R0914",
    "name": "Too many local variables",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 15,
    "description": "Used when a function or method has too many statements. You should then split it in smaller functions / methods.",
    "key": "R0915",
    "name": "Too many statements",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 20,
    "description": "Used when an if statement contains too many boolean expressions.",
    "key": "R0916",
    "name": "Too many boolean expressions in if statement",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 20,
    "key": "R0921",
    "name": "Abstract class not referenced",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 45,
    "key": "R0922",
    "name": "Abstract class used too few times",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 20,
    "key": "R0923",
    "name": "Interface not implemented",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 20,
    "description": "Used when multiple consecutive isinstance calls can be merged into one.",
    "key": "R1701",
    "name": "Consider merging isinstance calls",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 30,
    "description": "Used when a function or a method has too many nested blocks. This makes the code less understandable and maintainable.",
    "key": "R1702",
    "name": "Too many nested blocks",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 10,
    "description": "Used when an if statement can be replaced with 'bool(test)'.",
    "key": "R1703",
    "name": "Simplifiable if statement",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 60,
    "description": "Used when a local name is redefining an argument, which might suggest a potential error. This is taken in account only for a handful of name binding operations, such as for iteration, with statement assignment and exception handler assignment.",
    "key": "R1704",
    "name": "Redefining argument with local name",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 20,
    "description": "Used in order to highlight an unnecessary block of code following an if containing a return statement. As such, it will warn when it encounters an else following a chain of ifs, all of them containing a return statement.",
    "key": "R1705",
    "name": "Unnecessary \"else\" after \"return\"",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 20,
    "description": "Used when one of known pre-python 2.5 ternary syntax is used.",
    "key": "R1706",
    "name": "Consider using ternary",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 1,
    "description": "In Python, a tuple is actually created by the comma symbol, not by the parentheses. Unfortunately, one can actually create a tuple by misplacing a trailing comma, which can lead to potential weird bugs in your code. You should always use parentheses explicitly for creating a tuple.",
    "key": "R1707",
    "name": "Disallow trailing comma tuple",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "According to PEP479, the raise of StopIteration to end the loop of a generator may lead to hard to find bugs. This PEP specify that raise StopIteration has to be replaced by a simple return statement",
    "key": "R1708",
    "name": "Do not raise StopIteration in generator, use return statement instead",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 20,
    "description": "Emitted when redundant pre-python 2.5 ternary syntax is used.",
    "key": "R1709",
    "name": "Boolean expression may be simplified",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 20,
    "description": "According to PEP8, if any return statement returns an expression, any return statements where no value is returned should explicitly state this as return None, and an explicit return statement should be present at the end of the function (if reachable)",
    "key": "R1710",
    "name": "Either all return statements in a function should return an expression, or none of them should.",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 1,
    "description": "Emitted when a single \"return\" or \"return None\" statement is found at the end of function or method definition. This statement can safely be removed because Python will implicitly return None",
    "key": "R1711",
    "name": "Useless return at end of function or method",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 1,
    "description": "You do not have to use a temporary variable in order to swap variables. Using \"tuple unpacking\" to directly swap variables makes the intention more clear.",
    "key": "R1712",
    "name": "Consider using tuple unpacking for swapping variables",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 1,
    "description": "Using str.join(sequence) is faster, uses less memory and increases readability compared to for-loop iteration.",
    "key": "R1713",
    "name": "Consider using str.join(sequence) for concatenating strings from an iterable",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 1,
    "description": "To check if a variable is equal to one of many values,combine the values into a tuple and check if the variable is contained \"in\" it instead of checking for equality against each of the values.This is faster and less verbose.",
    "key": "R1714",
    "name": "Consider using \"in\"",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 1,
    "description": "Using the builtin dict.get for getting a value from a dictionary if a key is present or a default if not, is simpler and considered more idiomatic, although sometimes a bit slower",
    "key": "R1715",
    "name": "Consider using dict.get for getting values from a dict if a key is present or a default if not",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 1,
    "description": "This message is emitted when pylint encounters boolean operation like\"a < b and b < c\", suggesting instead to refactor it to \"a < b < c\"",
    "key": "R1716",
    "name": "Simplify chained comparison between the operands",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 15,
    "description": "Emitted when we detect the creation of a dictionary using the dict() callable and a transient list. Although there is nothing syntactically wrong with this code, it is hard to read and can be simplified to a dict comprehension.Also it is faster since you don't need to create another transient list",
    "key": "R1717",
    "name": "Consider using a dictionary comprehension",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 15,
    "description": "Although there is nothing syntactically wrong with this code, it is hard to read and can be simplified to a set comprehension.Also it is faster since you don't need to create another transient list",
    "key": "R1718",
    "name": "Consider using a set comprehension",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 1,
    "description": "Used when an if expression can be replaced with 'bool(test)'.",
    "key": "R1719",
    "name": "Simplifiable if expression",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 1,
    "description": "Used in order to highlight an unnecessary block of code following an if containing a raise statement. As such, it will warn when it encounters an else following a chain of ifs, all of them containing a raise statement.",
    "key": "R1720",
    "name": "Unnecessary \"else\" after \"raise\"",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 15,
    "description": "Used when there is some code behind a \"return\" or \"raise\" statement, which will never be accessed.",
    "key": "W0101",
    "name": "Unreachable code",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 15,
    "description": "Used when a mutable value as list or dictionary is detected in a default value for an argument.",
    "key": "W0102",
    "name": "Dangerous default value as argument",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 15,
    "description": "Used when a statement doesn't have (or at least seems to) any effect.",
    "key": "W0104",
    "name": "Statement seems to have no effect",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 15,
    "description": "Used when a string is used as a statement (which of course has no effect). This is a particular case of W0104 with its own message so you can easily disable it if you're using those strings as documentation, instead of comments.",
    "key": "W0105",
    "name": "String statement has no effect",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 15,
    "description": "Used when an expression that is not a function call is assigned to nothing. Probably something else was intended.",
    "key": "W0106",
    "name": "Expression is assigned to nothing",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 1,
    "description": "Used when a \"pass\" statement that can be avoided is encountered.",
    "key": "W0107",
    "name": "Unnecessary pass statement",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when the body of a lambda expression is a function call on the same argument list as the lambda itself; such lambda expressions are in all but a few cases replaceable with the function being called in the body of the lambda.",
    "key": "W0108",
    "name": "Lambda may not be necessary",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 10,
    "description": "Used when a dictionary expression binds the same key multiple times.",
    "key": "W0109",
    "name": "Duplicate key in dictionary",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 15,
    "key": "W0110",
    "name": "map/filter on lambda could be replaced by comprehension",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 20,
    "description": "Used when assignment will become invalid in future Python release due to introducing new keyword.",
    "key": "W0111",
    "name": "Assignments should not be made to new Python keywords",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 20,
    "description": "Loops should only have an else clause if they can exit early with a break statement, otherwise the statements under else should be on the same scope as the loop itself.",
    "key": "W0120",
    "name": "Else clause on loop without a break statement",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "key": "W0121",
    "name": "Use raise ErrorClass(args) instead of raise ErrorClass, args.",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 30,
    "description": "Used when you use the \"exec\" statement (function for Python 3), to discourage its usage. That doesn't mean you cannot use it !",
    "key": "W0122",
    "name": "Use of exec",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 30,
    "description": "Used when you use the \"eval\" function, to discourage its usage. Consider using `ast.literal_eval` for safely evaluating strings containing Python expressions from untrusted sources.",
    "key": "W0123",
    "name": "Use of eval",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 30,
    "description": "Emitted when a `with` statement component returns multiple values and uses name binding with `as` only for a part of those values, as in with ctx() as a, b. This can be misleading, since it's not clear if the context manager returns a tuple or if the node without a name binding is another context manager.",
    "key": "W0124",
    "name": "Following \"as\" with another context manager looks like a tuple.",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 30,
    "description": "Emitted when a conditional statement (If or ternary if) uses a constant value for its test. This might not be what the user intended to do.",
    "key": "W0125",
    "name": "Using a conditional statement with a constant value",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 15,
    "key": "W0141",
    "name": "Used black listed builtin function",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 15,
    "key": "W0142",
    "name": "Used * or ** magic",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 1,
    "description": "This message is emitted when pylint detects that a comparison with a callable was made, which might suggest that some parenthesis were omitted, resulting in potential unwanted behaviour.",
    "key": "W0143",
    "name": "Comparing against a callable, did you omit the parenthesis?",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 20,
    "description": "Used when a break or a return statement is found inside the finally clause of a try...finally block: the exceptions raised in the try clause will be silently swallowed instead of being re-raised.",
    "key": "W0150",
    "name": "Statement in finally block may swallow exception",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "A call of assert on a tuple will always evaluate to true if the tuple is not empty, and will always evaluate to false if it is.",
    "key": "W0199",
    "name": "Assert called on a 2-uple",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when an instance attribute is defined outside the __init__ method.",
    "key": "W0201",
    "name": "Attribute defined outside __init__",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 10,
    "description": "Used when a static method has \"self\" or a value specified in valid- classmethod-first-arg option or valid-metaclass-classmethod-first-arg option as first argument.",
    "key": "W0211",
    "name": "Static method with \"self\" or \"cls\" as first argument",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 60,
    "description": "Used when a protected member (i.e. class member with a name beginning with an underscore) is access outside the class or a descendant of the class where it's defined.",
    "key": "W0212",
    "name": "Access to a protected member of a client class",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 15,
    "description": "Used when a method has a different number of arguments than in the implemented interface or in an overridden method.",
    "key": "W0221",
    "name": "Parameter number discrepancy",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 20,
    "description": "Used when a method signature is different than in the implemented interface or in an overridden method.",
    "key": "W0222",
    "name": "Method signature discrepancy",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 60,
    "description": "Used when an abstract method (i.e. raise NotImplementedError) is not overridden in concrete class.",
    "key": "W0223",
    "name": "Abstract method is not overridden",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 20,
    "description": "Used when an ancestor class method has an __init__ method which is not called by a derived class.",
    "key": "W0231",
    "name": "__init__ method from base class is not called",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 20,
    "description": "Used when a class has no __init__ method, neither its parent classes.",
    "key": "W0232",
    "name": "Class has no __init__ method",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 120,
    "description": "Used when an __init__ method is called on a class which is not in the direct ancestors for the analysed class.",
    "key": "W0233",
    "name": "__init__ method from a non direct base class is called",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 15,
    "key": "W0234",
    "name": "__iter__ returns non-iterator",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 1,
    "description": "Used whenever we can detect that an overridden method is useless, relying on super() delegation to do the same thing as another method from the MRO.",
    "key": "W0235",
    "name": "Useless super delegation",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 1,
    "description": "Used when a statement is ended by a semi-colon (\";\"), which isn't necessary (that's python, not C ;).",
    "key": "W0301",
    "name": "Unnecessary semicolon",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 1,
    "description": "Used when an unexpected number of indentation's tabulations or spaces has been found.",
    "key": "W0311",
    "name": "Bad indentation",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 1,
    "description": "Used when there are some mixed tabs and spaces in a module.",
    "key": "W0312",
    "name": "Mixed tabs/spaces indentation",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 1,
    "key": "W0331",
    "name": "Use of the <> operator",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 1,
    "key": "W0332",
    "name": "Use of \"l\" as long integer identifier",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 1,
    "key": "W0333",
    "name": "Use of the `` operator",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 1,
    "description": "Used when `from module import *` is detected.",
    "key": "W0401",
    "name": "Wildcard import",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 1,
    "description": "Used a module marked as deprecated is imported.",
    "key": "W0402",
    "name": "Uses of a deprecated module",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 15,
    "key": "W0403",
    "name": "Relative import",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 1,
    "description": "Used when a module is reimported multiple times.",
    "key": "W0404",
    "name": "Reimport",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 15,
    "description": "Used when a module is importing itself.",
    "key": "W0406",
    "name": "Module imports itself",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 10,
    "description": "Python 2.5 and greater require __future__ import to be the first non docstring statement in the module.",
    "key": "W0410",
    "name": "__future__ import is not the first non docstring statement",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 60,
    "description": "Used when a warning note as FIXME or XXX is detected.",
    "key": "W0511",
    "name": "Task marker found",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 15,
    "key": "W0512",
    "name": "Source line cannot be decoded using the specified source file encoding",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 15,
    "description": "Used when a variable is defined through the \"global\" statement but the variable is not defined in the module scope.",
    "key": "W0601",
    "name": "Global variable undefined at the module level",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 15,
    "description": "Used when a variable is defined through the \"global\" statement but no assignment to this variable is done.",
    "key": "W0602",
    "name": "Unassigned global variable",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 60,
    "description": "Used when you use the \"global\" statement to update a global variable. Pylint just try to discourage this usage. That doesn't mean you cannot use it !",
    "key": "W0603",
    "name": "Using the global statement",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 1,
    "description": "Used when you use the \"global\" statement at the module level since it has no effect",
    "key": "W0604",
    "name": "Using the global statement at the module level",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 1,
    "description": "Used when an imported module or variable is not used.",
    "key": "W0611",
    "name": "Unused import",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when a variable is defined but not used.",
    "key": "W0612",
    "name": "Unused variable",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 15,
    "description": "Used when a function or method argument is not used.",
    "key": "W0613",
    "name": "Unused argument",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 1,
    "description": "Used when an imported module or variable is not used from a `'from X import *'` style import.",
    "key": "W0614",
    "name": "Unused import from wildcard import",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 15,
    "description": "Used when a variable's name hides a name defined in the outer scope.",
    "key": "W0621",
    "name": "Redefining name from outer scope",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when a variable or function override a built-in.",
    "key": "W0622",
    "name": "Redefining built-in",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 20,
    "description": "Used when an exception handler assigns the exception to an existing name",
    "key": "W0623",
    "name": "Redefining name in exception handler",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 15,
    "description": "Used when a loop variable (i.e. defined by a for loop or a list comprehension or a generator expression) is used outside the loop.",
    "key": "W0631",
    "name": "Using possibly undefined loop variable",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 15,
    "description": "Used when there is an unbalanced tuple unpacking in assignment",
    "key": "W0632",
    "name": "Possible unbalanced tuple unpacking",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 15,
    "key": "W0633",
    "name": "Attempting to unpack a non-sequence",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 20,
    "description": "A variable used in a closure is defined in a loop. This will result in all closures using the same value for the closed-over variable.",
    "key": "W0640",
    "name": "Cell variable defined in loop",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 1,
    "description": "Used when a variable is defined but might not be used. The possibility comes from the fact that locals() might be used, which could consume or not the said variable",
    "key": "W0641",
    "name": "Possibly unused variable",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Invalid assignment to self or cls in instance or class method respectively.",
    "key": "W0642",
    "name": "Invalid assignment in method",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 15,
    "key": "W0701",
    "name": "Raising a string exception",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 15,
    "description": "Used when an except clause doesn't specify exceptions type to catch.",
    "key": "W0702",
    "name": "No exception type(s) specified",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 20,
    "description": "Used when an except catches a too general exception, possibly burying unrelated errors.",
    "key": "W0703",
    "name": "Catching too general exception",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 15,
    "key": "W0704",
    "name": "Except doesn't do anything",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 10,
    "description": "Used when an except catches a type that was already caught by a previous handler.",
    "key": "W0705",
    "name": "Catching previously caught exception type",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 1,
    "description": "Used when an except handler uses raise as its first or only operator. This is useless because it raises back the exception immediately. Remove the raise operator or the entire try-except-raise block!",
    "key": "W0706",
    "name": "The except handler raises immediately",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 15,
    "key": "W0710",
    "name": "Exception doesn't inherit from standard \"Exception\" class",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 15,
    "description": "Used when the exception to catch is of the form \"except A or B:\". If intending to catch multiple, rewrite as \"except (A, B):\"",
    "key": "W0711",
    "name": "Exception to catch is the result of a binary operation",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 15,
    "key": "W0712",
    "name": "Implicit unpacking of exceptions is not supported in Python 3",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when passing multiple arguments to an exception constructor, the first of them a string literal containing what appears to be placeholders intended for formatting",
    "key": "W0715",
    "name": "Exception arguments suggest string formatting might be intended",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when an operation is done against an exception, but the operation is not valid for the exception in question. Usually emitted when having binary operations between exceptions in except handlers.",
    "key": "W0716",
    "name": "Invalid exception operation",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 20,
    "key": "W1001",
    "name": "Use of \"property\" on an old style class",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 15,
    "key": "W1111",
    "name": "Assigning to function call which only returns None",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "When defining a keyword argument before variable positional arguments, one can end up in having multiple values passed for the aforementioned parameter in case the method is called with keyword arguments.",
    "key": "W1113",
    "name": "Keyword argument before variable positional arguments list",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when a logging statement has a call form of \"logging.<logging method>(format_string % (format_args...))\". Use another type of string formatting instead. You can use % formatting but leave interpolation to the logging function by passing the parameters as arguments. If logging-fstring- interpolation is disabled then you can use fstring formatting. If logging- format-interpolation is disabled then you can use str.format.",
    "key": "W1201",
    "name": "Specify string format arguments as logging function parameters",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when a logging statement has a call form of \"logging.<logging method>(format_string.format(format_args...))\". Use another type of string formatting instead. You can use % formatting but leave interpolation to the logging function by passing the parameters as arguments. If logging-fstring- interpolation is disabled then you can use fstring formatting. If logging- not-lazy is disabled then you can use % formatting as normal.",
    "key": "W1202",
    "name": "Logging format interpolation",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 1,
    "description": "Used when a logging statement has a call form of \"logging.<logging method>(f\"...\")\".Use another type of string formatting instead. You can use % formatting but leave interpolation to the logging function by passing the parameters as arguments. If logging-format-interpolation is disabled then you can use str.format. If logging-not-lazy is disabled then you can use % formatting as normal.",
    "key": "W1203",
    "name": "Usage of % formatting in logging functions",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when a format string that uses named conversion specifiers is used with a dictionary whose keys are not all strings.",
    "key": "W1300",
    "name": "Format string dictionary key should be a string",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when a format string that uses named conversion specifiers is used with a dictionary that contains keys not required by the format string.",
    "key": "W1301",
    "name": "Unused key in format string dictionary",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when a PEP 3101 format string is invalid.",
    "key": "W1302",
    "name": "Invalid format string",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when a PEP 3101 format string that uses named fields doesn't receive one or more required keywords.",
    "key": "W1303",
    "name": "Missing keyword argument for format string",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when a PEP 3101 format string that uses named fields is used with an argument that is not required by the format string.",
    "key": "W1304",
    "name": "Unused format argument",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when a PEP 3101 format string contains both automatic field numbering (e.g. '{}') and manual field specification (e.g. '{0}').",
    "key": "W1305",
    "name": "Format string contains both automatic field numbering and manual field specification",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when a PEP 3101 format string uses an attribute specifier ({0.length}), but the argument passed for formatting doesn't have that attribute.",
    "key": "W1306",
    "name": "Missing format attribute",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when a PEP 3101 format string uses a lookup specifier ({a[1]}), but the argument passed for formatting doesn't contain or doesn't have that key as an attribute.",
    "key": "W1307",
    "name": "Using invalid lookup key in format specifier",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 1,
    "description": "Used when we detect that a string formatting is repeating an argument instead of using named string arguments",
    "key": "W1308",
    "name": "Duplicate string formatting argument",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when a backslash is in a literal string but not as an escape.",
    "key": "W1401",
    "name": "Anomalous backslash escape",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 15,
    "description": "Used when an escape like \\u is encountered in a byte string where it has no effect.",
    "key": "W1402",
    "name": "Anomalous Unicode escape in byte string",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 1,
    "key": "W1403",
    "name": "Implicit string concatenation",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 15,
    "description": "Python supports: r, w, a[, x] modes with b, +, and U (only with r) options. See http://docs.python.org/2/library/functions.html#open",
    "key": "W1501",
    "name": "Invalid mode for open",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 15,
    "key": "W1502",
    "name": "Using datetime.time in a boolean context.",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 15,
    "description": "The first argument of assertTrue and assertFalse is a condition. If a constant is passed as parameter, that condition will be always true. In this case a warning should be emitted.",
    "key": "W1503",
    "name": "Redundant unittest assert",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 15,
    "description": "The method is marked as deprecated and will be removed in a future version of Python. Consider looking for an alternative in the documentation.",
    "key": "W1505",
    "name": "Using deprecated method",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 15,
    "description": "The warning is emitted when a threading.Thread class is instantiated without the target function being passed. By default, the first parameter is the group param, not the target param.",
    "key": "W1506",
    "name": "threading.Thread needs the target function",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 15,
    "description": "os.environ is not a dict object but proxy object, so shallow copy has still effects on original object. See https://bugs.python.org/issue15373 for reference.",
    "key": "W1507",
    "name": "Using copy.copy(os.environ). Use os.environ.copy() instead.",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Env manipulation functions return None or str values. Supplying anything different as a default may cause bugs. See https://docs.python.org/3/library/os.html#os.getenv.",
    "key": "W1508",
    "name": "Invalid type in env manipulation functions",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 15,
    "description": "The preexec_fn parameter is not safe to use in the presence of threads in your application. The child process could deadlock before exec is called. If you must use it, keep it trivial! Minimize the number of libraries you call into.https://docs.python.org/3/library/subprocess.html#popen-constructor",
    "key": "W1509",
    "name": "Using preexec_fn keyword which may be unsafe in the presence of threads",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 15,
    "description": "Used when the apply built-in function is referenced (missing from Python 3)",
    "key": "W1601",
    "name": "apply built-in referenced",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when the basestring built-in function is referenced (missing from Python 3)",
    "key": "W1602",
    "name": "basestring built-in referenced",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when the buffer built-in function is referenced (missing from Python 3)",
    "key": "W1603",
    "name": "buffer built-in referenced",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when the cmp built-in function is referenced (missing from Python 3)",
    "key": "W1604",
    "name": "cmp built-in referenced",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when the coerce built-in function is referenced (missing from Python 3)",
    "key": "W1605",
    "name": "coerce built-in referenced",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when the execfile built-in function is referenced (missing from Python 3)",
    "key": "W1606",
    "name": "execfile built-in referenced",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when the file built-in function is referenced (missing from Python 3)",
    "key": "W1607",
    "name": "file built-in referenced",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when the long built-in function is referenced (missing from Python 3)",
    "key": "W1608",
    "name": "long built-in referenced",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when the raw_input built-in function is referenced (missing from Python 3)",
    "key": "W1609",
    "name": "raw_input built-in referenced",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when the reduce built-in function is referenced (missing from Python 3)",
    "key": "W1610",
    "name": "reduce built-in referenced",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when the StandardError built-in function is referenced (missing from Python 3)",
    "key": "W1611",
    "name": "StandardError built-in referenced",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when the unicode built-in function is referenced (missing from Python 3)",
    "key": "W1612",
    "name": "unicode built-in referenced",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when the xrange built-in function is referenced (missing from Python 3)",
    "key": "W1613",
    "name": "xrange built-in referenced",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when a __coerce__ method is defined (method is not used by Python 3)",
    "key": "W1614",
    "name": "__coerce__ method defined",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when a __delslice__ method is defined (method is not used by Python 3)",
    "key": "W1615",
    "name": "__delslice__ method defined",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when a __getslice__ method is defined (method is not used by Python 3)",
    "key": "W1616",
    "name": "__getslice__ method defined",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when a __setslice__ method is defined (method is not used by Python 3)",
    "key": "W1617",
    "name": "__setslice__ method defined",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when an import is not accompanied by ``from __future__ import absolute_import`` (default behaviour in Python 3)",
    "key": "W1618",
    "name": "import missing `from __future__ import absolute_import`",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used for non-floor division w/o a float literal or ``from __future__ import division`` (Python 3 returns a float for int division unconditionally)",
    "key": "W1619",
    "name": "division w/o __future__ statement",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used for calls to dict.iterkeys(), itervalues() or iteritems() (Python 3 lacks these methods)",
    "key": "W1620",
    "name": "Calling a dict.iter*() method",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used for calls to dict.viewkeys(), viewvalues() or viewitems() (Python 3 lacks these methods)",
    "key": "W1621",
    "name": "Calling a dict.view*() method",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when an object's next() method is called (Python 3 uses the next() built-in function)",
    "key": "W1622",
    "name": "Called a next() method on an object",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when a metaclass is specified by assigning to __metaclass__ (Python 3 specifies the metaclass as a class statement argument)",
    "key": "W1623",
    "name": "Assigning to a class's __metaclass__ attribute",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Indexing exceptions will not work on Python 3. Use `exception.args[index]` instead.",
    "key": "W1624",
    "name": "Indexing exceptions will not work on Python 3",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when a string exception is raised. This will not work on Python 3.",
    "key": "W1625",
    "name": "Raising a string exception",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when the reload built-in function is referenced (missing from Python 3). You can use instead imp.reload or importlib.reload.",
    "key": "W1626",
    "name": "reload built-in referenced",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when an __oct__ method is defined (method is not used by Python 3)",
    "key": "W1627",
    "name": "__oct__ method defined",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when a __hex__ method is defined (method is not used by Python 3)",
    "key": "W1628",
    "name": "__hex__ method defined",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when a __nonzero__ method is defined (method is not used by Python 3)",
    "key": "W1629",
    "name": "__nonzero__ method defined",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when a __cmp__ method is defined (method is not used by Python 3)",
    "key": "W1630",
    "name": "__cmp__ method defined",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when the input built-in is referenced (backwards-incompatible semantics in Python 3)",
    "key": "W1632",
    "name": "input built-in referenced",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when the round built-in is referenced (backwards-incompatible semantics in Python 3)",
    "key": "W1633",
    "name": "round built-in referenced",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when the intern built-in is referenced (Moved to sys.intern in Python 3)",
    "key": "W1634",
    "name": "intern built-in referenced",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when the unichr built-in is referenced (Use chr in Python 3)",
    "key": "W1635",
    "name": "unichr built-in referenced",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when the map built-in is referenced in a non-iterating context (returns an iterator in Python 3)",
    "key": "W1636",
    "name": "map built-in referenced when not iterating",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when the zip built-in is referenced in a non-iterating context (returns an iterator in Python 3)",
    "key": "W1637",
    "name": "zip built-in referenced when not iterating",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when the range built-in is referenced in a non-iterating context (returns a range in Python 3)",
    "key": "W1638",
    "name": "range built-in referenced when not iterating",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when the filter built-in is referenced in a non-iterating context (returns an iterator in Python 3)",
    "key": "W1639",
    "name": "filter built-in referenced when not iterating",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Using the cmp argument for list.sort or the sorted builtin should be avoided, since it was removed in Python 3. Using either `key` or `functools.cmp_to_key` should be preferred.",
    "key": "W1640",
    "name": "Using the cmp argument for list.sort / sorted",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when a class implements __eq__ but not __hash__. In Python 2, objects get object.__hash__ as the default implementation, in Python 3 objects get None as their default __hash__ implementation if they also implement __eq__.",
    "key": "W1641",
    "name": "Implementing __eq__ without also implementing __hash__",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when a __div__ method is defined. Using `__truediv__` and setting__div__ = __truediv__ should be preferred.(method is not used by Python 3)",
    "key": "W1642",
    "name": "__div__ method defined",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when an __idiv__ method is defined. Using `__itruediv__` and setting__idiv__ = __itruediv__ should be preferred.(method is not used by Python 3)",
    "key": "W1643",
    "name": "__idiv__ method defined",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when a __rdiv__ method is defined. Using `__rtruediv__` and setting__rdiv__ = __rtruediv__ should be preferred.(method is not used by Python 3)",
    "key": "W1644",
    "name": "__rdiv__ method defined",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when the message attribute is accessed on an Exception. Use str(exception) instead.",
    "key": "W1645",
    "name": "Exception.message removed in Python 3",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when using str.encode or str.decode with a non-text encoding. Use codecs module to handle arbitrary codecs.",
    "key": "W1646",
    "name": "non-text encoding used in str.decode",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when accessing sys.maxint. Use sys.maxsize instead.",
    "key": "W1647",
    "name": "sys.maxint removed in Python 3",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when accessing a string function that has been deprecated in Python 3.",
    "key": "W1649",
    "name": "Accessing a deprecated function on the string module",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when using the deprecated deletechars parameters from str.translate. Use re.sub to remove the desired characters",
    "key": "W1650",
    "name": "Using str.translate with deprecated deletechars parameters",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when accessing a function on itertools that has been removed in Python 3.",
    "key": "W1651",
    "name": "Accessing a deprecated function on the itertools module",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when accessing a field on types that has been removed in Python 3.",
    "key": "W1652",
    "name": "Accessing a deprecated fields on the types module",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when a next method is defined that would be an iterator in Python 2 but is treated as a normal function in Python 3.",
    "key": "W1653",
    "name": "next method defined",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when dict.items is referenced in a non-iterating context (returns an iterator in Python 3)",
    "key": "W1654",
    "name": "dict.items referenced when not iterating",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when dict.keys is referenced in a non-iterating context (returns an iterator in Python 3)",
    "key": "W1655",
    "name": "dict.keys referenced when not iterating",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when dict.values is referenced in a non-iterating context (returns an iterator in Python 3)",
    "key": "W1656",
    "name": "dict.values referenced when not iterating",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when accessing a field on operator module that has been removed in Python 3.",
    "key": "W1657",
    "name": "Accessing a removed attribute on the operator module",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when accessing a field on urllib module that has been removed or moved in Python 3.",
    "key": "W1658",
    "name": "Accessing a removed attribute on the urllib module",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when accessing the xreadlines() function on a file stream, removed in Python 3.",
    "key": "W1659",
    "name": "Accessing a removed xreadlines attribute",
    "priority": "MAJOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Used when accessing a field on sys module that has been removed in Python 3.",
    "key": "W1660",
    "name": "Accessing a removed attribute on the sys module",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Emitted when using an exception, that was bound in an except handler, outside of the except handler. On Python 3 these exceptions will be deleted once they get out of the except handler.",
    "key": "W1661",
    "name": "Using an exception object that was bound by an except handler",
    "priority": "MINOR"
  },
  {
    "constantDebtMinutes": 5,
    "description": "Emitted when using a variable, that was bound in a comprehension handler, outside of the comprehension itself. On Python 3 these variables will be deleted outside of the comprehension.",
    "key": "W1662",
    "name": "Using a variable that was bound inside a comprehension",
    "priority": "MINOR"
  }
]
